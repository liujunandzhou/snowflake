// Code generated by protoc-gen-go.
// source: idserver.proto
// DO NOT EDIT!

/*
Package idserver is a generated protocol buffer package.

It is generated from these files:
	idserver.proto

It has these top-level messages:
	Request
	Response
*/
package idserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Response struct {
	Uniqid           *string `protobuf:"bytes,1,opt,name=uniqid" json:"uniqid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetUniqid() string {
	if m != nil && m.Uniqid != nil {
		return *m.Uniqid
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "idserver.Request")
	proto.RegisterType((*Response)(nil), "idserver.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for IdServer service

type IdServerClient interface {
	GetId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type idServerClient struct {
	cc *grpc.ClientConn
}

func NewIdServerClient(cc *grpc.ClientConn) IdServerClient {
	return &idServerClient{cc}
}

func (c *idServerClient) GetId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/idserver.IdServer/GetId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdServer service

type IdServerServer interface {
	GetId(context.Context, *Request) (*Response, error)
}

func RegisterIdServerServer(s *grpc.Server, srv IdServerServer) {
	s.RegisterService(&_IdServer_serviceDesc, srv)
}

func _IdServer_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdServerServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idserver.IdServer/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdServerServer).GetId(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "idserver.IdServer",
	HandlerType: (*IdServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetId",
			Handler:    _IdServer_GetId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4c, 0x29, 0x4e,
	0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x38,
	0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0xa4, 0xb8, 0x38, 0x82, 0x52, 0x8b,
	0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xf8, 0xb8, 0xd8, 0x4a, 0xf3, 0x32, 0x0b, 0x33, 0x53, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x8d, 0xac, 0xb8, 0x38, 0x3c, 0x53, 0x82, 0xc1, 0x5a, 0x84, 0xf4,
	0xb8, 0x58, 0xdd, 0x53, 0x4b, 0x3c, 0x53, 0x84, 0x04, 0xf5, 0xe0, 0xc6, 0x42, 0xcd, 0x90, 0x12,
	0x42, 0x16, 0x82, 0x98, 0x05, 0x08, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xc4, 0xe6, 0x48, 0x7d, 0x00,
	0x00, 0x00,
}
